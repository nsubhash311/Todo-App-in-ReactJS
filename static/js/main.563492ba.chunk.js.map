{"version":3,"sources":["logo.svg","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ListItems","props","listItems","items","map","item","visibility","x","react_default","a","createElement","className","key","type","defaultValue","text","index_es","onClick","addItemToFav","icon","deleteItem","react_flip_move_es","duration","easing","library","add","faTrash","faHeart","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","favItems","currentItem","addItem","bind","assertThisInitialized","handleInput","e","newItem","concat","toConsumableArray","setState","val","val2","target","value","Date","now","filteredItems","filter","filteredItems2","style","backgroundColor","marginTop","padding","color","id","placeholder","onChange","variant","src_ListItems","Button","window","location","reload","React","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sQCuCvBC,MAlCjB,SAAmBC,GAEf,IAEMC,EAFQD,EAAME,MAEIC,IAAI,SAAAC,GAE5B,GAAsB,WAAnBJ,EAAMK,WAEL,IAAIC,EAAI,MAET,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,IAAKP,EAAKO,KACrCJ,EAAAC,EAAAC,cAAA,SACAF,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOC,aAAcT,EAAKU,OAEvCP,EAAAC,EAAAC,cAAA,QAAMC,UAAWJ,GACjBC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAiBL,UAAU,UAAUM,QAAS,WAC1ChB,EAAMiB,aAAab,EAAKO,IAAIP,EAAKU,OAClCI,KAAK,UAERX,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAiBL,UAAU,UAAUM,QAAS,WAC1ChB,EAAMmB,WAAWf,EAAKO,MACvBO,KAAK,eAKZ,OAAOX,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAUC,SAAU,IAAKC,OAAO,eAC/BrB,mBCxBTsB,IAAQC,IAAIC,KACZF,IAAQC,IAAIE,SAqGGC,cAnGb,SAAAA,EAAY3B,GAAM,IAAA4B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM/B,KACDmC,MAAQ,CACXjC,MAAM,GACNkC,SAAS,GACTC,YAAY,CACVvB,KAAK,GACLH,IAAI,KAGRiB,EAAKU,QAAUV,EAAKU,QAAQC,KAAbV,OAAAW,EAAA,EAAAX,CAAAD,IACfA,EAAKX,aAAeW,EAAKX,aAAasB,KAAlBV,OAAAW,EAAA,EAAAX,CAAAD,IACpBA,EAAKT,WAAaS,EAAKT,WAAWoB,KAAhBV,OAAAW,EAAA,EAAAX,CAAAD,IAClBA,EAAKa,YAAcb,EAAKa,YAAYF,KAAjBV,OAAAW,EAAA,EAAAX,CAAAD,IAbHA,uEAeVc,GAEN,IAAMC,EAAUZ,KAAKI,MAAME,YAC3B,GAAmB,KAAhBM,EAAQ7B,KAAW,CACpB,IAAMZ,EAAK,GAAA0C,OAAAf,OAAAgB,EAAA,EAAAhB,CAAOE,KAAKI,MAAMjC,OAAlB,CAAyByC,IACtCZ,KAAKe,SAAS,CACZ5C,MAAOA,EACPmC,YAAY,CACVvB,KAAK,GACLH,IAAI,4CAMGoC,EAAIC,GACf,IAAI9C,EAAQ6B,KAAKI,MAAMC,SACvB,IAAI,IAAIhC,KAAQF,EAEd,GAAGE,EAAKO,MAAQoC,EAEd,OAIJ,IAAMJ,EAAU,CACd7B,KAAKkC,EACLrC,IAAIoC,GAEEzC,EAAC,GAAAsC,OAAAf,OAAAgB,EAAA,EAAAhB,CAAOE,KAAKI,MAAMC,UAAlB,CAA4BO,IACrCZ,KAAKe,SAAS,CACZV,SAAU9B,wCAKFoC,GACVX,KAAKe,SAAS,CACZT,YAAY,CACVvB,KAAM4B,EAAEO,OAAOC,MACfvC,IAAKwC,KAAKC,4CAILzC,GACT,IAAM0C,EAAetB,KAAKI,MAAMjC,MAAMoD,OAAO,SAAAlD,GAAI,OAC/CA,EAAKO,MAAMA,IACL4C,EAAgBxB,KAAKI,MAAMC,SAASkB,OAAO,SAAAlD,GAAI,OACnDA,EAAKO,MAAMA,IACfoB,KAAKe,SAAS,CACZ5C,MAAOmD,EACPjB,SAAUmB,qCAMd,OACEhD,EAAAC,EAAAC,cAAA,WACKF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAS8C,MAAS,CAACC,gBAAgB,UAAWC,UAAU,MAAOC,QAAQ,OAAQC,MAAM,UAAnG,gBACTrD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAETH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,QACEH,EAAAC,EAAAC,cAAA,UAAQoD,GAAG,cACPtD,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOkD,YAAY,aAAcC,SAAUhC,KAAKU,cAC5DlC,EAAAC,EAAAC,cAAA,UAAQuD,QAAQ,OAAOhD,QAASe,KAAKO,SAArC,OAA2D,KAE/D/B,EAAAC,EAAAC,cAACwD,EAAD,CAAW/D,MAAO6B,KAAKI,MAAMjC,MAAOiB,WAAYY,KAAKZ,WAAYF,aAAgBc,KAAKd,aAAcZ,WAAW,UAEjHE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAf,IAAsBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,cACpBH,EAAAC,EAAAC,cAACwD,EAAD,CAAW/D,MAAO6B,KAAKI,MAAMC,SAAUjB,WAAYY,KAAKZ,WAAYF,aAAgBc,KAAKd,aAAcZ,WAAW,aAInHE,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAQxD,UAAW,YAAYM,QAAS,kBAAMmD,OAAOC,SAASC,UAAUL,QAAQ,QAAhF,SAAsG,YA3F3FM,IAAMC,WCCJC,QACW,cAA7BL,OAAOC,SAASK,UAEe,UAA7BN,OAAOC,SAASK,UAEhBN,OAAOC,SAASK,SAASC,MACvB,2DCZNC,IAASC,OAAOrE,EAAAC,EAAAC,cAACoE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.563492ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './ListItems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems(props)\r\n{\r\n    const items = props.items;\r\n    \r\n    const listItems = items.map(item =>\r\n   {\r\n    if(props.visibility===\"hidden\")\r\n    {\r\n        var x = \"asd\"\r\n    }\r\n       return <div className=\"list\" key={item.key}>\r\n         <p>\r\n         <input type=\"text\" defaultValue={item.text}/>\r\n        \r\n        <span className={x}> \r\n        <FontAwesomeIcon className=\"faicons\" onClick={() => {\r\n            props.addItemToFav(item.key,item.text)\r\n        }} icon=\"heart\" />\r\n        \r\n        <FontAwesomeIcon className=\"faicons\" onClick={() => {\r\n            props.deleteItem(item.key)\r\n        }} icon=\"trash\" />\r\n        </span>\r\n     </p>\r\n     \r\n    </div>})\r\n    return <div>\r\n        <FlipMove duration={300} easing=\"ease-in-out\">\r\n        {listItems}\r\n        </FlipMove>\r\n    \r\n    </div>;\r\n  }\r\n\r\n  export default ListItems;","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItems from './ListItems'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport { faHeart } from '@fortawesome/free-solid-svg-icons'\nlibrary.add(faTrash)\nlibrary.add(faHeart)\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      items:[],\n      favItems:[],\n      currentItem:{\n        text:'',\n        key:''\n      }\n    }\n    this.addItem = this.addItem.bind(this);\n    this.addItemToFav = this.addItemToFav.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n  }\n  addItem(e){\n    // e.preventDefault();\n    const newItem = this.state.currentItem;\n    if(newItem.text !==\"\"){\n      const items = [...this.state.items, newItem];\n    this.setState({\n      items: items,\n      currentItem:{\n        text:'',\n        key:''\n      }\n    })\n    }\n  }\n\n  addItemToFav(val,val2){\n    var items = this.state.favItems;\n    for(var item in items)\n    {\n      if(item.key === val)\n      {\n        return;\n      }\n    }\n\n    const newItem = {\n      text:val2,\n      key:val\n    }\n      const x = [...this.state.favItems, newItem];\n    this.setState({\n      favItems: x\n    })\n\n  }\n\n  handleInput(e){\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n  deleteItem(key){\n    const filteredItems= this.state.items.filter(item =>\n      item.key!==key);\n      const filteredItems2= this.state.favItems.filter(item =>\n        item.key!==key);\n    this.setState({\n      items: filteredItems,\n      favItems: filteredItems2\n    })\n\n  }\n   \n render(){\n  return (\n    <div>\n         <h1 className=\"Recipe\" style = {{backgroundColor:'#7952b3', marginTop:'0px', padding:'10px', color:'white'}}>Recipe Maker</h1>\n<div className=\"flex\">\n        \n      <div className=\"App\">\n      <h1 className=\"fav\">List</h1>\n        <header id=\"to-do-form\" >\n            <input type=\"text\" placeholder=\"Enter task\"  onChange={this.handleInput}></input>\n            <button variant=\"dark\" onClick={this.addItem}>Add</button>{' '}\n        </header>  \n        <ListItems items={this.state.items} deleteItem={this.deleteItem} addItemToFav = {this.addItemToFav} visibility=\"true\" />        \n      </div>\n      <div className=\"App\"> <h1 className=\"fav\">Favourites</h1>\n        <ListItems items={this.state.favItems} deleteItem={this.deleteItem} addItemToFav = {this.addItemToFav} visibility=\"hidden\" /> \n      </div>\n      \n    </div>  \n       <Button className= \"reset-btn\" onClick={() => window.location.reload()} variant=\"dark\">Reset</Button>{' '}\n    </div>\n      \n      \n  );\n }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}